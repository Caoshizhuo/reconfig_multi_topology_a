module reconfig_multi_topology_a (
input[7:0]					a1;
input[7:0]					a2;
input[7:0]					a3;
input[7:0]					b;
input							s0;
input							s1;

output[WIDTH:0]					y;


);

wire									carry_0;
wire									carry_1;
wire									carry_2;
wire									carry_3;
wire									carry_4;
wire									carry_5;
wire									carry_6;
wire									carry_7;


reg									lut_out0;
reg									lut_out1;
reg									lut_out2;
reg									lut_out3;
reg									lut_out4;
reg									lut_out5;
reg									lut_out6;
reg									lut_out7;

wire[2:0]							sigma_s;


//(σs) logic
assign sigma  =	(s0==0 & s1==0) 	?	3'd0:
						(s0==0 & s1==1)	?	3'd2:
						(s0==1 & s1==0)	?	3'd4: 3'd6；
//mux_logic
always(*)begin
	if(sigma==3'd0)begin
		lut_out0 = a1[0];
		lut_out1 = a1[1];
		lut_out2 = a1[2];
		lut_out3 = a1[3];
		lut_out4 = a1[4];
		lut_out5 = a1[5];
		lut_out6 = a1[6];
		lut_out7 = a1[7];
	end
	else if(sigma==3'd1)begin
		lut_out0 = ~a1[0];
		lut_out1 = ~a1[1];
		lut_out2 = ~a1[2];
		lut_out3 = ~a1[3];
		lut_out4 = ~a1[4];
		lut_out5 = ~a1[5];
		lut_out6 = ~a1[6];
		lut_out7 = ~a1[7];
	end
	else if(sigma==3'd2)begin
		lut_out0 = a2[0];
		lut_out1 = a2[1];
		lut_out2 = a2[2];
		lut_out3 = a2[3];
		lut_out4 = a2[4];
		lut_out5 = a2[5];
		lut_out6 = a2[6];
		lut_out7 = a2[7];
	end
	else if(sigma==3'd3)begin
		lut_out0 = ~a2[0];
		lut_out1 = ~a2[1];
		lut_out2 = ~a2[2];
		lut_out3 = ~a2[3];
		lut_out4 = ~a2[4];
		lut_out5 = ~a2[5];
		lut_out6 = ~a2[6];
		lut_out7 = ~a2[7];
	end
	else if(sigma==3'd4)begin
		lut_out0 = a3[0];
		lut_out1 = a3[1];
		lut_out2 = a3[2];
		lut_out3 = a3[3];
		lut_out4 = a3[4];
		lut_out5 = a3[5];
		lut_out6 = a3[6];
		lut_out7 = a3[7];
	end
	else if(sigma==3'd5)begin
		lut_out0 = ~a3[0];
		lut_out1 = ~a3[1];
		lut_out2 = ~a3[2];
		lut_out3 = ~a3[3];
		lut_out4 = ~a3[4];
		lut_out5 = ~a3[5];
		lut_out6 = ~a3[6];
		lut_out7 = ~a3[7];
	end
	else
		lut_out0 = 1'b0;
		lut_out1 = 1'b0;
		lut_out2 = 1'b0;
		lut_out3 = 1'b0;
		lut_out4 = 1'b0;
		lut_out5 = 1'b0;
		lut_out6 = 1'b0;
		lut_out7 = 1'b0;
end

wire				f0;
wire				f1;
wire				f2;
wire				f3;
wire				f4;
wire				f5;
wire				f6;
wire				f7;

assign f0 = b[0] ^ lut_out0;
assign f1 = b[1] ^ lut_out1;
assign f2 = b[2] ^ lut_out0;
assign f3 = b[3] ^ lut_out1;
assign f4 = b[4] ^ lut_out0;
assign f5 = b[5] ^ lut_out1;
assign f6 = b[6] ^ lut_out0;
assign f7 = b[7] ^ lut_out1; 


assign carry0 =   f0	? 0 		: 	b[0];
assign carry1 = 	f1	? carry0 :	b[1];
assign carry2 = 	f2	? carry1	:	b[2];
assign carry3 = 	f3	? carry2	:	b[3];
assign carry4 = 	f4	? carry3	:	b[4];
assign carry5 = 	f5	? carry4	:	b[5];
assign carry6 = 	f6	? carry5	:	b[6];
assign carry7 = 	f7	? carry6	:	b[7];


assign y[0] = f0 ^ 0
assign y[1] = f1 ^ carry0;
assign y[2] = f2 ^ carry1;
assign y[3] = f3 ^ carry2;
assign y[4] = f4 ^ carry3;
assign y[5] = f5 ^ carry4;
assign y[6] = f6 ^ carry5;
assign y[7] = f7 ^ carry6;
assign y[8] = carry7;










endmodule 